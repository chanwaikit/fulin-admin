{"version":3,"sources":["utils/callApi.js","routes/sku-table/index.js"],"names":["noop","apiBase","window","location","origin","callApi","custom","api","type","data","success","error","Promise","resolve","reject","request","timeout","withCredentials","send","end","err","res","ok","console","log","stringifiedBigNumber","text","replace","body","JSON","parse","response","TextArea","Dragger","Option","RangePicker","Logon","state","getData","t","setState","textAreaValue","updateSkuNameTable","sku_name","this","className","style","height","value","onChange","e","target","split","rows","onClick","marginTop","PureComponent","Component"],"mappings":"2FAOa,SAAPA,KAPN,0CAQMC,EAAO,UAAMC,OAAOC,SAASC,OAAtB,QAoDEC,IAlDC,SAAC,GAOV,IAAD,EANJC,YAMI,IANJA,SAMI,EALJC,YAKI,IALJA,KAAM,GAKF,EAJJC,YAII,IAJJA,MAAO,OAIH,EAHJC,YAGI,IAHJA,MAAO,GAGH,EAFJC,YAEI,IAFJA,SAAUV,EAEN,EADJW,YACI,IADJA,OAAQX,EACJ,EACJ,OAAO,IAAIY,SAAQ,SAACC,EAASC,GAC3BC,IAAQP,EAAMF,EAAO,GAAD,OAAIC,GAAMN,EAAUM,GACrCS,QAAQ,KAERR,KAAK,oBACLS,kBAEAC,KAAKT,GACLU,KAAI,SAACC,EAAKC,GACLD,IAAQC,EAAIC,IAEdC,QAAQC,IAAR,4BAAiCJ,IACjCT,EAAMS,GACNN,EAAOM,KAkBDK,EAAuBJ,EAAIK,KAAKC,QAClC,sBACA,YAEEC,EAAOC,KAAKC,MAAML,GACxBf,EAAQkB,EAAKG,mB,6PC5CfC,G,4BAAR,IAAQA,UAER,IAAQC,QACR,IAAOC,OACP,IAAQC,YACFC,E,4MACJC,MAAQ,G,EAQRC,QAAU,WACTjC,YAAQ,CACPG,KAAM,OACND,IAAK,6BACLE,KAAM,GAENC,QAAS,WAAe,IAAdW,EAAa,uDAAP,GACfE,QAAQC,IAAIH,GACZkB,EAAKC,SAAS,CACbC,cAAepB,GAAO,MAGxBV,MAAO,gB,EAMT+B,mBAAqB,WACpB,IAAOD,EAAiBF,EAAKF,MAAtBI,cACPpC,YAAQ,CACPG,KAAM,OACND,IAAK,gCACLE,KAAM,CACLkC,SAAUF,GAEX/B,QAAS,WAAe,IAAdW,EAAa,uDAAP,GACf,IAAQX,QAAQ,4BAChBa,QAAQC,IAAIH,IAEbV,MAAO,gB,uDAlCT,WACCiC,KAAKN,Y,oBAsCN,WAAW,IAAD,OACFG,EAAiBG,KAAKP,MAAtBI,cAEP,OAAO,yBAAKI,UAAU,aACrB,8DACA,kBAACb,EAAD,CAAUc,MAAO,CAACC,OAAQ,SAAUC,MAAOP,EAAeQ,SAAU,SAACC,GACpE3B,QAAQC,IAAI0B,EAAEC,OAAOH,MAAMI,MAAM,WACjCb,EAAKC,SAAS,CACbC,cAAeS,EAAEC,OAAOH,SAEvBK,KAAM,IACT,uBAAQC,QAAS,WAChBf,EAAKG,sBACHI,MAAO,CAACS,UAAW,QAAS/C,KAAK,WAFpC,qB,GAvDiBgD,iBAAiBC,aA6DvBrB","file":"static/js/13.8ca25aa3.chunk.js","sourcesContent":["/* eslint-disable */\nimport each from 'lodash/each';\nimport isArray from 'lodash/isArray';\nimport isPlainObject from 'lodash/isPlainObject';\n\nimport request from 'superagent';\n\nconst noop = () => {};\nconst apiBase = `${window.location.origin}/api`;\n\nconst callApi = ({\n  custom = false,\n  api = '',\n  type = 'POST',\n  data = {},\n  success = noop,\n  error = noop\n}) => {\n  return new Promise((resolve, reject) => {\n    request(type, custom?`${api}`:apiBase + api)\n      .timeout(200000)\n      // .type('form')\n      .type('application/json')\n      .withCredentials()\n      // .send(toFlattenMap(data))\n      .send(data)\n      .end((err, res) => {\n        if (err || !res.ok) {\n          // not alert, console log\n          console.log(`not 200 error msg:${err}`);\n          error(err);\n          reject(err);\n        } else {\n          // http res code is 200\n          // if (res.body.errorCode === 200) {\n          //   // normal\n          //   const stringifiedBigNumber = res.text.replace(\n          //     /([^\\\\])\":(\\d{15,})/g,\n          //     '$1\":\"$2\"'\n          //   );\n          //   const body = JSON.parse(stringifiedBigNumber);\n          //   success(body.response);\n          //   resolve(body.response);\n          // } else if (error) {\n          //   error(res.body);\n          //   reject(res.body);\n          // } else {\n          //   console.warn(res.body.errorDescription);\n          // }\n          const stringifiedBigNumber = res.text.replace(\n              /([^\\\\])\":(\\d{15,})/g,\n              '$1\":\"$2\"'\n            );\n          const body = JSON.parse(stringifiedBigNumber);\n          success(body.response);\n        }\n      });\n  });\n};\n\nexport default callApi;\n\nfunction prepend(prefix, name, separator) {\n  if (prefix) {\n    if (separator) {\n      return `${prefix}.${name}`;\n    }\n    return prefix + name;\n  }\n  return name;\n}\n\nfunction flatten(prefix, obj, map) {\n  if (obj) {\n    if (isArray(obj)) {\n      for (let i = 0; i < obj.length; i++) {\n        const item = obj[i];\n        flatten(prepend(prefix, `[${i}]`, false), item, map);\n      }\n    } else if (isPlainObject(obj)) {\n      if (obj.__type__ === 'map') {\n        each(obj, function (propertyObject, propertyName) {\n          if (propertyName !== '__type__') {\n            flatten(\n              prepend(prefix, `[${propertyName}]`, false),\n              propertyObject,\n              map\n            );\n          }\n        });\n      } else {\n        each(obj, function (propertyObject, propertyName) {\n          flatten(prepend(prefix, propertyName, true), propertyObject, map);\n        });\n      }\n    } else {\n      map[prefix] = obj;\n    }\n  }\n}\n\nfunction toFlattenMap(obj) {\n  const map = {};\n\n  flatten(null, obj, map);\n  return map;\n}\n","//框架依赖\nimport React, {Component, PureComponent} from 'react';\nimport { Select, Input, DatePicker, Row, Col, Button, Tag, Table, Upload, Spin, Modal, message } from 'antd';\nimport callApi from 'utils/callApi';\nimport dayjs from 'dayjs';\nimport moment from 'moment';\nimport * as echarts from 'echarts';\n\nimport './index.less';\n\nconst { TextArea } = Input;\n\nconst { Dragger } = Upload;\nconst {Option} = Select;\nconst { RangePicker } = DatePicker;\nclass Logon extends (PureComponent || Component) {\n  state = {\n\n  }\n\n  componentDidMount () {\n  \tthis.getData();\n  }\n\n  getData = () => {\n  \tcallApi({\n  \t\ttype: 'POST',\n  \t\tapi: '/statistic/getSkuNameTable',\n  \t\tdata: {\n  \t\t},\n  \t\tsuccess: (res = '') => {\n  \t\t\tconsole.log(res);\n  \t\t\tthis.setState({\n  \t\t\t\ttextAreaValue: res || []\n  \t\t\t});\n  \t\t},\n  \t\terror: () => {\n\n  \t\t}\n  \t});\n  }\n  // updateSkuNameTable\n  updateSkuNameTable = () => {\n  \tconst {textAreaValue} = this.state;\n  \tcallApi({\n  \t\ttype: 'POST',\n  \t\tapi: '/statistic/updateSkuNameTable',\n  \t\tdata: {\n  \t\t\tsku_name: textAreaValue\n  \t\t},\n  \t\tsuccess: (res = '') => {\n  \t\t\tmessage.success('操作成功');\n  \t\t\tconsole.log(res);\n  \t\t},\n  \t\terror: () => {\n\n  \t\t}\n  \t});\n  }\n  render () {\n  \tconst {textAreaValue} = this.state;\n\n  \treturn <div className=\"sku-table\">\n  \t\t<h1>周报产品表</h1>\n  \t\t<TextArea style={{height: '500px'}} value={textAreaValue} onChange={(e) => {\n  \t\t\tconsole.log(e.target.value.split(/[\\s\\n]/));\n  \t\t\tthis.setState({\n  \t\t\t\ttextAreaValue: e.target.value\n  \t\t\t});\n  \t\t}} rows={8} />\n  \t\t<Button onClick={() => {\n  \t\t\tthis.updateSkuNameTable();\n  \t\t}} style={{marginTop: '16px'}} type=\"primary\">保存</Button>\n  \t</div>;\n  }\n}\nexport default Logon;\n"],"sourceRoot":""}