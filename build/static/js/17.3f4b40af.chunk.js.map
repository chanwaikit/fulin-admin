{"version":3,"sources":["utils/callApi.js","routes/data-record/index.js"],"names":["noop","apiBase","window","location","origin","callApi","custom","api","type","data","success","error","Promise","resolve","reject","request","timeout","withCredentials","send","end","err","res","ok","console","log","stringifiedBigNumber","text","replace","body","JSON","parse","response","dayStartMs","moment","Date","getTime","format","dayEndMs","Logon","state","modalSpinning","spinning","visible","selectedRowKeys","selectedRows","cid","mid","tableData","modalSelect","pickerDate","getData","t","setState","getColumns","title","dataIndex","key","this","className","size","tip","bordered","sticky","id","pagination","dataSource","columns","PureComponent","Component"],"mappings":"2FAOa,SAAPA,KAPN,0CAQMC,EAAO,UAAMC,OAAOC,SAASC,OAAtB,QAoDEC,IAlDC,SAAC,GAOV,IAAD,EANJC,YAMI,IANJA,SAMI,EALJC,YAKI,IALJA,KAAM,GAKF,EAJJC,YAII,IAJJA,MAAO,OAIH,EAHJC,YAGI,IAHJA,MAAO,GAGH,EAFJC,YAEI,IAFJA,SAAUV,EAEN,EADJW,YACI,IADJA,OAAQX,EACJ,EACJ,OAAO,IAAIY,SAAQ,SAACC,EAASC,GAC3BC,IAAQP,EAAMF,EAAO,GAAD,OAAIC,GAAMN,EAAUM,GACrCS,QAAQ,KAERR,KAAK,oBACLS,kBAEAC,KAAKT,GACLU,KAAI,SAACC,EAAKC,GACLD,IAAQC,EAAIC,IAEdC,QAAQC,IAAR,4BAAiCJ,IACjCT,EAAMS,GACNN,EAAOM,KAkBDK,EAAuBJ,EAAIK,KAAKC,QAClC,sBACA,YAEEC,EAAOC,KAAKC,MAAML,GACxBf,EAAQkB,EAAKG,mB,yMC/CjBC,G,OAAaC,SAAWC,MAAOC,UAAY,SAA0BC,OAAO,eAC5EC,EAAWJ,SAAWC,MAAOC,UAAY,QAAyBC,OAAO,cAEzEE,E,4MACJC,MAAQ,CACPC,eAAcA,EACdC,UAASA,EACTC,SAAQA,EACRC,gBAAiB,GACjBC,aAAc,GACdC,IAAK,GACLC,IAAK,GACLC,UAAW,GACXC,YAAa,eACbC,WAAY,CAAChB,IAAOD,EAAY,cAAeC,IAAOI,EAAU,gB,EAUjEa,QAAU,WACT7C,YAAQ,CACPG,KAAM,OACND,IAAK,4BACLE,KAAM,GAENC,QAAS,WACRyC,EAAKC,SAAS,CACbX,UAASA,EACTM,WAHqB,uDAAP,KAGI,S,EAMtBM,WAAa,WACZ,MAAO,CACN,CACCC,MAAO,iCACPC,UAAW,WACXC,IAAK,YACH,CACFF,MAAO,2BACPC,UAAW,kBACXC,IAAK,qB,uDA/BR,WACCC,KAAKL,SAAS,CACbX,UAASA,IAEVgB,KAAKP,Y,oBAgCN,WACC,IAAOT,GAAP,EAAmCgB,KAAKlB,OAAjCE,SAAP,IAAiBM,UAEjB,OAAO,yBAAKW,UAAU,eAErB,uBAAMC,KAAK,QAAQC,IAAI,kEAAgBnB,SAAUA,GAC9C,uBAAOoB,YAAgBC,UAAOC,GAAG,aAAaJ,KAAK,QAAQK,cAAmBC,oBALlF,EAA6B,GAA7B,EAKyGC,QAAST,KAAKJ,qB,GAxDrGc,iBAAiBC,aA6DvB9B","file":"static/js/17.3f4b40af.chunk.js","sourcesContent":["/* eslint-disable */\nimport each from 'lodash/each';\nimport isArray from 'lodash/isArray';\nimport isPlainObject from 'lodash/isPlainObject';\n\nimport request from 'superagent';\n\nconst noop = () => {};\nconst apiBase = `${window.location.origin}/api`;\n\nconst callApi = ({\n  custom = false,\n  api = '',\n  type = 'POST',\n  data = {},\n  success = noop,\n  error = noop\n}) => {\n  return new Promise((resolve, reject) => {\n    request(type, custom?`${api}`:apiBase + api)\n      .timeout(200000)\n      // .type('form')\n      .type('application/json')\n      .withCredentials()\n      // .send(toFlattenMap(data))\n      .send(data)\n      .end((err, res) => {\n        if (err || !res.ok) {\n          // not alert, console log\n          console.log(`not 200 error msg:${err}`);\n          error(err);\n          reject(err);\n        } else {\n          // http res code is 200\n          // if (res.body.errorCode === 200) {\n          //   // normal\n          //   const stringifiedBigNumber = res.text.replace(\n          //     /([^\\\\])\":(\\d{15,})/g,\n          //     '$1\":\"$2\"'\n          //   );\n          //   const body = JSON.parse(stringifiedBigNumber);\n          //   success(body.response);\n          //   resolve(body.response);\n          // } else if (error) {\n          //   error(res.body);\n          //   reject(res.body);\n          // } else {\n          //   console.warn(res.body.errorDescription);\n          // }\n          const stringifiedBigNumber = res.text.replace(\n              /([^\\\\])\":(\\d{15,})/g,\n              '$1\":\"$2\"'\n            );\n          const body = JSON.parse(stringifiedBigNumber);\n          success(body.response);\n        }\n      });\n  });\n};\n\nexport default callApi;\n\nfunction prepend(prefix, name, separator) {\n  if (prefix) {\n    if (separator) {\n      return `${prefix}.${name}`;\n    }\n    return prefix + name;\n  }\n  return name;\n}\n\nfunction flatten(prefix, obj, map) {\n  if (obj) {\n    if (isArray(obj)) {\n      for (let i = 0; i < obj.length; i++) {\n        const item = obj[i];\n        flatten(prepend(prefix, `[${i}]`, false), item, map);\n      }\n    } else if (isPlainObject(obj)) {\n      if (obj.__type__ === 'map') {\n        each(obj, function (propertyObject, propertyName) {\n          if (propertyName !== '__type__') {\n            flatten(\n              prepend(prefix, `[${propertyName}]`, false),\n              propertyObject,\n              map\n            );\n          }\n        });\n      } else {\n        each(obj, function (propertyObject, propertyName) {\n          flatten(prepend(prefix, propertyName, true), propertyObject, map);\n        });\n      }\n    } else {\n      map[prefix] = obj;\n    }\n  }\n}\n\nfunction toFlattenMap(obj) {\n  const map = {};\n\n  flatten(null, obj, map);\n  return map;\n}\n","//框架依赖\nimport React, {Component, PureComponent} from 'react';\nimport { Table, Spin } from 'antd';\nimport callApi from 'utils/callApi';\nimport moment from 'moment';\nimport './index.less';\n\nconst dayStartMs = moment(new Date().getTime() - 14 * 24 * 60 * 60 * 1000).format('YYYY-MM-DD');\nconst dayEndMs = moment(new Date().getTime() - 7 * 24 * 60 * 60 * 1000).format('YYYY-MM-DD');\n\nclass Logon extends (PureComponent || Component) {\n  state = {\n  \tmodalSpinning: false,\n  \tspinning: false,\n  \tvisible: false,\n  \tselectedRowKeys: [],\n  \tselectedRows: [],\n  \tcid: '',\n  \tmid: '',\n  \ttableData: [],\n  \tmodalSelect: 'total_volume',\n  \tpickerDate: [moment(dayStartMs, 'YYYY-MM-DD'), moment(dayEndMs, 'YYYY-MM-DD')]\n  }\n\n  componentDidMount () {\n  \tthis.setState({\n  \t\tspinning: true\n  \t});\n  \tthis.getData();\n  }\n\n  getData = () => {\n  \tcallApi({\n  \t\ttype: 'POST',\n  \t\tapi: '/statistic/getDailyRecord',\n  \t\tdata: {\n  \t\t},\n  \t\tsuccess: (res = []) => {\n  \t\t\tthis.setState({\n  \t\t\t\tspinning: false,\n  \t\t\t\ttableData: res || []\n  \t\t\t});\n  \t\t}\n  \t});\n  }\n\n  getColumns = () => {\n  \treturn [\n  \t\t{\n  \t\t\ttitle: '捕捉的日期',\n  \t\t\tdataIndex: 'date_str',\n  \t\t\tkey: 'date_str'\n  \t\t}, {\n  \t\t\ttitle: '更新时间',\n  \t\t\tdataIndex: 'update_date_str',\n  \t\t\tkey: 'update_date_str'\n  \t\t}\n  \t];\n  }\n\n  render () {\n  \tconst {spinning, tableData = []} = this.state;\n\n  \treturn <div className=\"week-report\">\n\n  \t\t<Spin size=\"large\" tip=\"正在获取数据，请稍等...\" spinning={spinning}>\n  \t\t   <Table bordered={true} sticky id=\"data-table\" size=\"small\" pagination={false} dataSource={tableData} columns={this.getColumns()} />\n  \t\t</Spin>\n  \t</div>;\n  }\n}\nexport default Logon;\n"],"sourceRoot":""}